给你二叉树的根结点 root ，按 垂序遍历 返回其结点值。

对位于 (x, y) 的每个结点而言，其左右子结点分别位于 (x - 1, y - 1) 和 (x + 1, y - 1) 。

二叉树 垂序遍历 是由从左到右每个唯一 x 坐标的非空 报告 形成的列表，报告 是一个包含给定 x 坐标下所有节点的列表，其中节点需要按 y 坐标从最高到最低排序。如果 报告 中任意两个节点的 y 坐标相同，则值较小的节点应排在前面。

 

示例 1：



输入：root = [3,9,20,null,null,15,7]
输出：[[9],[3,15],[20],[7]]
解释： 
在不丧失其普遍性的情况下，我们可以假设根结点位于 (0, 0)：
然后，值为 9 的结点出现在 (-1, -1)；
值为 3 和 15 的两个结点分别出现在 (0, 0) 和 (0, -2)；
值为 20 的结点出现在 (1, -1)；
值为 7 的结点出现在 (2, -2)。
示例 2：



输入：root = [1,2,3,4,5,6,7]
输出：[[4],[2],[1,5,6],[3],[7]]
解释：
根据给定的方案，值为 5 和 6 的两个结点出现在同一位置。
然而，在报告 "[1,5,6]" 中，结点值 5 排在前面，因为 5 小于 6。
 

提示：

树中结点数目总数在范围 [1, 1000] 内
0 <= Node.val <= 1000

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/vertical-order-traversal-of-a-binary-tree
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。